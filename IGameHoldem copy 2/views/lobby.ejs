<body class="lobby_page">
    <header>
        <div class="header_section">
            <div class="header_profile">
                <img id="iMainAvatar" src="images/avatars/avatar00.png" alt="">
            </div>
            <div class="header_info">
                <span class="header_name"><%=account.strNickname%></span>
                <span class="header_point" id="iCash"></span>
            </div>
            <div class="header_roombtn" >
                <div><a href="javascript:OnClickMakeRoom();">방만들기</a></div>
            </div>
            <div class="menu-button" id="Menubutton">
                <div></div>
                <div></div>
                <div></div>
            </div>
        </div>
    </header>
    <section class="mb_bg">
        <div class="section_body">
            <div class="section_first" id="slideA">
                <div class="start">
                    <p>바로입장</p>
                </div>
                <div class="section_button_one" onclick="OnClickQuickJoin('quickjoin1');">
                    <div id="quickjoin1">500</div>
                </div>
                <div class="section_button_two" onclick="OnClickQuickJoin('quickjoin2');">
                    <div id="quickjoin2">1,000</div>
                </div>
                <div class="section_button_three" onclick="OnClickQuickJoin('quickjoin3');">
                    <div id="quickjoin3">5,000</div>
                </div>
            </div>

            <!-- 600px 미만 바로시작 버튼 -->
            <div class="section_first_mb" id="slideB">
                <div class="section_button_one_mb">
                    <div>
                        <p id="mQuickjoin1">500</p>
                        <a href="javascript:OnClickQuickJoin('mQuickjoin1');">바로입장</a>
                        <a href="#" class="mb-list">목록>>></a>
                    </div>
                </div>
                <div class="section_button_two_mb">
                    <div>
                        <p id="mQuickjoin2">1,000</p>
                        <a href="javascript:OnClickQuickJoin('mQuickjoin2');">바로입장</a>
                        <a href="#" class="mb-list">목록>>></a>
                    </div>
                </div>
                <div class="section_button_three_mb">
                    <div>
                        <p id="mQuickjoin3">5,000</p>
                        <a href="javascript:OnClickQuickJoin('mQuickjoin3');">바로입장</a>
                        <a href="#" class="mb-list">목록>>></a>
                    </div>
                </div>
            </div>
        
            <!-- 두번째 섹션 -->
            <div class="section_second">
                <div class="section_second_header">
                    <div class="header_button">
                        <div>전체</div>
                    </div>
                    <!-- <div class="header_button">
                        <div>500</div>
                    </div>
                    <div class="header_button">
                        <div>1,000</div>
                    </div>
                    <div class="header_button">
                        <div>5,000</div>
                    </div> -->
                </div>
                <!-- LIST -->
                <div class="section_second_body">
                    <div class="section_room_list" id="tbodyRoomList">
                        
                    </div>
                </div>
            </div>

            <!-- 세번째 섹션 -->
            <div class="section_third">
                <div class="section_thi_head">
                    <div>아이디</div>
                    <div>보유금액</div>
                    <div>위치</div>
                </div>
            </div>
        </div>
    </section>

    <!-- 메뉴 팝업 -->
    <div class="main_menu" id="mainMenu">
        <div class="menu_nav">
            <a href="#">
                <div id="settingsMenu">설정</div>
            </a>
            <a href="#">
                <div>금고</div>
            </a>
            <a href="#">
                <div>언어</div>
            </a>
            <a href="#">
                <div id="closeMenu">메뉴닫기</div>
            </a>
            <a href="#">
                <div id="closeGame">게임종료</div>
            </a>
        </div>
    </div>
    <!-- 배경 오버레이 -->
    <div class="overlay" id="overlay"></div>


    <div class="popup" id="popupMenu">
        <div class="popup_fixed">
            <!-- setting -->
            <div class="setting_head">
                <p>설정</p>
            </div>

            <div class="setting_body">
                
                <div class="sound gauge">
                    <div>
                        <span>효과음</span>
                    </div>
                    <div class="percent-container">
                        <span class="percent">0%</span>
                    </div>
                    <div class="container_top">
                        <div class="image-container imageContainer">
                            <div class="indicator"></div> <!-- 추가된 표시기 -->
                        </div><!-- 이미지 -->
                    </div>
                </div>

                <div class="melody gauge">
                    <div>
                        <span>음  악</span>
                    </div>
                    <div class="percent-container">
                        <span class="percent">0%</span>
                    </div>
                    <div class="container_top">
                        <div class="image-container imageContainer">
                            <div class="indicator"></div> <!-- 추가된 표시기 -->
                        </div><!-- 이미지 -->
                    </div>
                </div>
                <div class="table_color">
                    <div>
                        <span>테이블색
                            
                        </span>
                    </div>
                    <div>
                        <input type="radio" id="selectBg0" name="onoff">블루
                        <label for="selectBg0"></label>
                        
                        <input type="radio" id="selectBg1" name="onoff">레드
                        <label for="selectBg1"></label>
                    </div>
                </div>
                <div class="rebyin">
                    <div>
                        <span>자동 리바인</span>
                    </div>
                    <div class="toggle-button off" id="rebuyinAuto">
                        <div>OFF</div>
                    </div>
                </div>
                <div class="byin gauge">
                    <div>
                        <span>바이인</span>
                    </div>
                    <div class="percent-container">
                        <span class="percent" id="selectRebuyIn">0%</span>
                    </div>
                    <div class="container_top">
                        <div class="image-container imageContainer">
                            <div class="indicator"></div> <!-- 추가된 표시기 -->
                        </div><!-- 이미지 -->
                    </div>
                </div>
            </div>
            <div class="setting_button">
                <div><a href="javascript:OnClickModifySetting();">확인</a></div>
                <div><a href="javascript:OnClickModifyClose();">취소</a></div>
            </div>
        </div>
    </div>
    <!-- 배경 오버레이 -->
    <div class="popup-overlay" id="popupOverlay"></div>
    <!-- 방만들기 팝업 -->
    <div id="popup_makeroom" class="room_popup" style="position: absolute; top:50%; left:50%; border-radius: 10px; transform:translate(-50%, -50%); text-align: center;">
        <div class="close">
            <a href="javascript:OnClickMakeRoomClose();">
                <img src="images/close_menu.svg">
            </a>
        </div>
        <div class="room_body">
            <div class="room_header">
                <p>방만들기</p>
            </div>
            <div class="form">
                <!-- <ul class="room_game">
                    <li>게임</li>
                    <li>
                        <input id="room_game" type="text" value="" disabled>
                    </li>
                </ul> -->
                <ul class="room_list">
                    <li>방 제목</li>
                    <li><input id="room_name" type="text" value="포커 홀덤~!!!"></li>
                </ul>
                <ul class="room_blind">
                    <li id="strBetAmountType">블라인드</li>
                    <li>
                        <select id="room_blind">
                        </select>
                    </li>
                </ul>
                <ul class="room_betting">
                    <li>베팅시간</li>
                    <li>
                        <select id="room_bettingtime">
                        </select>
                    </li>
                </ul>
                <!-- <ul>
                    <li>바이인</li>
                    <li>
                        <select id="room_buyin">
                            <option value="100">100%</option>
                            <option value="200">200%</option>
                            <option value="300">300%</option>
                        </select>
                    </li>
                </ul> -->
                <ul class="room_player">
                    <li  class="room_player">최대인원</li>
                    <li>
                        <select id="room_numplayer" class="custom-select">
                        </select>
                    </li>
                </ul>
                <ul class="room_pw">
                    <li>비밀번호</li>
                    <li><input id="room_password" type="text"></li>
                </ul>
            </div>
            <div class="room_btn">
                <button class="button_makeroom">방 만들기</button>
            </div>
        </div>
    </div>

    <!-- 방만들기 팝업 -->
    <!-- <div id="create-room-popup" class="room_popup">
        <div class="room_header">
            <p class="room_make">방만들기</p>
        </div>
        <div class="room_player">
            <p>플레이어</p>
            <select id="player-count" class="custom-select">
                <option value="2">6명</option>
                <option value="3">7명</option>
                <option value="4">8명</option>
                <option value="5">9명</option>
            </select>
        </div>
        <div class="room_blind">
            <p>블라인드 금액</p>
            <select id="blind-count" class="custom-select">
                <option value="2">1</option>
                <option value="3">2</option>
                <option value="4">3</option>
                <option value="5">4</option>
            </select>
        </div>
        <div class="room_btn">
            <button>확인</button>
            <button>취소</button>
        </div>
    </div>  -->
    <!-- 배경 오버레이 -->
    <div class="popup-overlay" id="popupOverlay"></div>

    <script src='/socket.io/socket.io.js'></script>
    <script>

        var socket = io('');

        var account = JSON.parse('<%-JSON.stringify(account)%>');
        var lobbyName = JSON.parse('<%-JSON.stringify(lobbyName)%>');
        let targetName = lobbyName;
        console.log(lobbyName);
        console.log(account);
        console.log(targetName);

        //  HOLDEM, SITGO, TOURNAMENT, BIG2
        
        let strGameTitle = 'HOLDEM';
        let eGameType = 'HOLDEM';
        let reiBlind = parseInt($('#room_blind').val())*2;
        let iRoomCount = {500:0,1000:0,2000:0};
        let index = 0;
        if(lobbyName == 'IHoldemLobby')
        {
            strGameTitle = 'HOLDEM';
            eGameType = 'HOLDEM';
            reiBlind = parseInt($('#room_blind').val())*2;
            iRoomCount = {500:0,1000:0,2000:0};
            index = 0;
        }
        else
        {
            strGameTitle = 'BIG2';
            eGameType = 'BIG2';
            reiBlind = parseInt($('#room_blind').val());
            iRoomCount = {1000:0,2000:0,5000:0};
        }
        
        let iAvatarIndex = account.iAvatar;

        let leadingZeros = (n, digits) => {
            //console.log(`${n}`);
            let zero = '';
            n = n.toString();

            if (n.length < digits) {
                for (let i = 0; i < digits - n.length; i++)
                    zero += '0';
            }
            return zero + n;
        }

        //
        for ( let i = 0; i < 14; ++ i )
        {
            let strSource = `images/avatars/avatar${leadingZeros(i, 2)}.png`;
            let tagAvatar = `<li><img class="avatar_index" value='${i}' src=${strSource}></li>`;
            //console.log(strSource);

            $('#avatar_list').append(tagAvatar);
        }

        $(document).on('ready', ()=> {
            socket.emit('CM_Login', account.strID, account.strNickname ,account.strPassword, account.iCash);
            //eGameType = "ALL";
            
            if(targetName == 'IHoldemLobby')
            {
                $('#quickjoin1').text('500');
                $('#quickjoin2').text('1000');
                $('#quickjoin3').text('2000');
                $('#mQuickjoin1').text('500');
                $('#mQuickjoin2').text('1000');
                $('#mQuickjoin3').text('2000');
                $('[value="HOLDEM"]').addClass('active');
                eGameType = "HOLDEM";
                let tag = `<option value="6">6명</option>
                            <option value="9" selected>9명</option>`;
                let tag2 = `<option value="8">8초</option>
                            <option value="10">10초</option>
                            <option value="12">12초</option>`;
                let tag3 = `<option value="500">500 / 1,000</option>
                            <option value="1000">1,000 / 2,000</option>
                            <option value="2000">2,000 / 4,000</option>
                            `;
                $('#room_numplayer').append(tag);
                $('#room_bettingtime').append(tag2);
                $('#room_blind').append(tag3);
                $('.tg-2pky').text('블라인드');
            }
            else
            {
                $('#quickjoin1').text('1000');
                $('#quickjoin2').text('2000');
                $('#quickjoin3').text('5000');
                $('#mQuickjoin1').text('1000');
                $('#mQuickjoin2').text('2000');
                $('#mQuickjoin3').text('5000');
                $('[value="BIG2"]').addClass('active');
                eGameType = "BIG2";
                let tag = `<option value="4">4명</option>`;
                let tag2 = `<option value="25">25초</option>
                            <option value="30">30초</option>
                            <option value="40">40초</option>`;
                let tag3 = `<option value="1000">1,000</option>
                            <option value="2000">2,000</option>
                            <option value="5000">5,000</option>
                            `;
                $('#room_numplayer').append(tag);
                $('#room_bettingtime').append(tag2);
                $('#room_blind').append(tag3);
                $('.tg-2pky').text('블라인드');
            }

            socket.emit('CM_RoomGameList', {eGameType:eGameType});
            // $('#popup_mypage').hide();
            $('#popup_makeroom').hide();

            let strSourceFilename = `images/avatars/avatar${leadingZeros(parseInt(iAvatarIndex), 2)}.png`;

            $('#iSelectAvatar').attr('src', strSourceFilename);
            $('#iMyPageAvatar').attr('src', strSourceFilename);
            $('#iMainAvatar').attr('src', strSourceFilename);

            let iRebuyIn = account.strOptionCode[0];
            let iRebuyInLevel = account.strOptionCode[1];
            let iBgLevel = account.strOptionCode[2];
            let iCardDeck = account.strOptionCode[3];
             // 음악 볼륨 및 효과음 볼륨 설정 값 로드
            let musicVolume = parseInt(account.strOptionCode.substring(4, 6));
            let soundVolume = parseInt(account.strOptionCode.substring(6, 8));

             // "99"를 100%로 변환
            musicVolume = musicVolume == 99 ? 100 : musicVolume;
            soundVolume = soundVolume == 99 ? 100 : soundVolume;

            if(iRebuyIn == 0) {
                $('#rebuyinAuto').removeClass('on').addClass('off').find('div').text('OFF');
            } else {
                $('#rebuyinAuto').removeClass('off').addClass('on').find('div').text('ON');
            }

            if(iBgLevel == 1)
            {
                $('#selectBg0').prop('checked', true);
                $('#selectBg1').prop('checked', false);
            }
            else
            {
                $('#selectBg0').prop('checked', false);
                $('#selectBg1').prop('checked', true);
            }
            
            $('#selectRebuyIn').text(parseInt(iRebuyInLevel) * 100 + '%');

             // 음악 및 효과음 볼륨 설정 업데이트
            $('.melody .percent').text(musicVolume + '%');
            $('.sound .percent').text(soundVolume + '%');

            // 음악 및 효과음 볼륨에 따른 표시기(indicator) 위치 업데이트
            // 이 부분은 프로젝트의 구체적인 UI 요소에 따라 다를 수 있으므로, 필요에 따라 수정
            $('.melody .indicator').css('left', musicVolume + '%');
            $('.sound .indicator').css('left', soundVolume + '%');
            //$('#selectBg').val(parseInt(iBgLevel));
            //$('#selectDeck').val(parseInt(iCardDeck));
            function toggleFullscreen() {
                var isFullscreen = document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
                console.log(`isFullscreen : ${isFullscreen}`);
                if (isFullscreen) {
                    $('.openFullscreen img').attr('src', 'images/small_size.svg');
                    $('.openFullscreen li:nth-child(2)').text('축소화면');
                } else {
                    $('.openFullscreen img').attr('src', 'images/full_size.svg');
                    $('.openFullscreen li:nth-child(2)').text('전체화면');
                }
            }
            // 전체 화면 상태 변경 이벤트 리스너
            $(document).on('fullscreenchange webkitfullscreenchange msfullscreenchange', toggleFullscreen);

            $(document).on('click', '.openFullscreen', (e) => {
                var elem = document.documentElement;
                if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.webkitExitFullscreen) { /* Safari */
                        document.webkitExitFullscreen();
                    } else if (document.msExitFullscreen) { /* IE11 */
                        document.msExitFullscreen();
                    }
                } else {
                    if (elem.requestFullscreen) {
                        elem.requestFullscreen();
                    } else if (elem.webkitRequestFullscreen) { /* Safari */
                        elem.webkitRequestFullscreen();
                    } else if (elem.msRequestFullscreen) { /* IE11 */
                        elem.msRequestFullscreen();
                    }
                }
            });
            // 메뉴 버튼 클릭 이벤트
            $('#Menubutton').click(function() {
                $('#mainMenu, #overlay').show();
            });

            // 오버레이 클릭 이벤트
            $('#overlay').click(function() {
                $('#mainMenu, #overlay').hide();
            });

            // 팝업 오버레이 클릭 이벤트
            $('#popupOverlay').click(function() {
                $('#mainMenu, #overlay, #popupMenu, #popupOverlay').hide();
            });

            // 설정 메뉴 클릭 이벤트
            $('#settingsMenu').click(function() {
                $('#mainMenu').hide(); // mainMenu 숨기기
                $('#popupMenu').show(); // popupMenu 보이기
                $('#overlay').hide(); // overlay 숨기기
                $('#popupOverlay').show(); // popupOverlay 보이기
            });

            // 메뉴닫기 이벤트
            $('#closeMenu').click(function() {
                $('#mainMenu').hide(); // mainMenu 숨기기
                $('#popupMenu').hide(); // popupMenu 보이기
                $('#overlay').hide(); // overlay 숨기기
                $('#popupOverlay').hide(); // popupOverlay 보이기
            });
            //게임종료 이벤트
            $('#closeGame').click(function() {
                window.close();
            });

            $('#rebuyinAuto').click(function(){
                let isOn = $(this).hasClass('on');
                if (isOn) {
                    $(this).removeClass('on').addClass('off');
                    $(this).find('div').text('OFF');
                } else {
                    $(this).removeClass('off').addClass('on');
                    $(this).find('div').text('ON');
                }
            });
        })

        socket.on('SM_RequestLogin', (data) => {

            console.log(`RequestLogin`);

            socket.emit('CM_Login', account.strID, account.strNickname, account.strPassword, account.iCash);

        });

        socket.on('SM_Error', (objectData) => {

            console.log(`SM_Error`);
            console.log(objectData);

            if ( objectData.error == 'NotExistRoom' )
            {
                alert('존재하지 않는 방입니다. 다시 시도해 주세요.');
                
            }
            else if ( objectData.error == 'AlreadyPlaying' )
            {
                alert('이전 게임이 정상적으로 끝나지 않아 잠시만 기다려주세요.');
            }
            else if ( objectData.error == 'NotEnoughCoin' )
            {
                alert('게임머니가 부족합니다. 확인해주세요.');
            }
            //location.reload();
        });

        socket.on('SM_RoomList', (rooms) => {

            console.log(`SM_RoomList`);
            console.log(rooms);
            // 가능한 모든 iDefaultCoin 값에 대해 카운트를 0으로 초기화
            let initialCounts = {500: 0, 1000: 0, 2000: 0};
            if(eGameType == 'HOLDEM')
            {
                initialCounts = {500: 0, 1000: 0, 2000: 0};
            }
            else
            {
                initialCounts = {1000: 0, 2000: 0, 5000: 0};
            }
            // rooms 배열을 순회하면서 각 iDefaultCoin 값에 대한 방의 개수를 계산
            rooms.forEach(room => {
                if (initialCounts.hasOwnProperty(room.iDefaultCoin)) {
                    initialCounts[room.iDefaultCoin]++;
                }
            });

            iRoomCount = initialCounts;

            $('#tbodyRoomList').empty();
            for ( let i in rooms )
            {
                let tag = '';

                if(eGameType == 'HOLDEM')
                {
                    tag = `
                    <table>
                        <tbody>
                        <tr>
                            <th class="column1 top_list">#${parseInt(i)+1}</th>
                            <th class="column2 top_list">바이인</th>
                            <th class="column3 top_list">BB</th>
                        </tr>
                        <tr>
                            <th class="column1 bottom_list">${rooms[i].iNumPlayer} / ${rooms[i].iMaxPlayer}</th>
                            <th class="column2 bottom_list">${formatCurrencyToKoreanWon(parseInt(rooms[i].iDefaultCoin)*100)}</th>
                            <th class="column3 bottom_list">${(parseInt(rooms[i].iDefaultCoin)*2).toLocaleString()}</th>
                        </tr>
                        <tr class="room-separator" style="height: 10px; margin-bottom:10px;"><td colspan="3"></td></tr>
                        </tbody>
                    </table>`;
                }
                else
                {
                    tag = `
                    <table>
                        <tbody>
                        <tr>
                            <th class="column1 top_list">#${parseInt(i)+1}</th>
                            <th class="column2 top_list">참가비</th>
                        </tr>
                        <tr>
                            <th class="column1 bottom_list">${rooms[i].iNumPlayer} / ${rooms[i].iMaxPlayer}</th>
                            <th class="column3 bottom_list">${(parseInt(rooms[i].iDefaultCoin)).toLocaleString()}</th>
                        </tr>
                        <tr class="room-separator" style="height: 10px; margin-bottom:10px;"><td colspan="3"></td></tr>
                        </tbody>
                    </table>`;
                }

                $('#tbodyRoomList').append(tag);
            }
        });

        socket.on('SM_RoomGameList', (rooms) => {

            console.log(`SM_RoomGameList`);
            console.log(rooms);
             // 가능한 모든 iDefaultCoin 값에 대해 카운트를 0으로 초기화
             let initialCounts = {500: 0, 1000: 0, 2000: 0};
             if(eGameType == 'HOLDEM')
            {
                initialCounts = {500: 0, 1000: 0, 2000: 0};
            }
            else
            {
                initialCounts = {1000: 0, 2000: 0, 5000: 0};
            }
            // rooms 배열을 순회하면서 각 iDefaultCoin 값에 대한 방의 개수를 계산
            rooms.forEach(room => {
                if (initialCounts.hasOwnProperty(room.iDefaultCoin)) {
                    initialCounts[room.iDefaultCoin]++;
                }
            });

            iRoomCount = initialCounts;

            $('#tbodyRoomList').empty();
            for ( let i in rooms )
            {
                let tag = '';

                if(eGameType == 'HOLDEM')
                {
                    tag = `
                    <table>
                        <tbody>
                        <tr>
                            <th class="column1 top_list">#${parseInt(i)+1}</th>
                            <th class="column2 top_list">바이인</th>
                            <th class="column3 top_list">BB</th>
                        </tr>
                        <tr>
                            <th class="column1 bottom_list">${rooms[i].iNumPlayer} / ${rooms[i].iMaxPlayer}</th>
                            <th class="column2 bottom_list">${formatCurrencyToKoreanWon(parseInt(rooms[i].iDefaultCoin)*100)}</th>
                            <th class="column3 bottom_list">${(parseInt(rooms[i].iDefaultCoin)*2).toLocaleString()}</th>
                        </tr>
                        <tr class="room-separator" style="height: 10px; margin-bottom:10px;"><td colspan="3"></td></tr>
                        </tbody>
                    </table>`;
                }
                else
                {
                    tag = `
                    <table>
                        <tbody>
                        <tr>
                            <th class="column1 top_list">#${parseInt(i)+1}</th>
                            <th class="column2 top_list">참가비</th>
                        </tr>
                        <tr>
                            <th class="column1 bottom_list">${rooms[i].iNumPlayer} / ${rooms[i].iMaxPlayer}</th>
                            <th class="column3 bottom_list">${(parseInt(rooms[i].iDefaultCoin)).toLocaleString()}</th>
                        </tr>
                        <tr class="room-separator" style="height: 10px; margin-bottom:10px;"><td colspan="3"></td></tr>
                        </tbody>
                    </table>`;
                }
                $('#tbodyRoomList').append(tag);
            }
        });

        function IsMobile()
        {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        }

        socket.on('SM_OpenGame', (objectData) => {
            console.log(`SM_OpenGame`);
            console.log(objectData);

            if ( objectData.result == 'OK' ) {
                const submitForm = () => {
                    var $form = $('<form></form>');
                    $form.attr('action', objectData.strAddress);
                    $form.attr('method', 'post');
                    $form.attr('target', '_self');

                    var eGameType = $(`<input type="hidden" value="${objectData.eGameType}" name="eGameType">`);
                    var strID = $(`<input type="hidden" value="${account.strID}" name="strID">`);
                    var strNickname = $(`<input type="hidden" value="${account.strNickname}" name="strNickname">`);
                    var strPassword = $(`<input type="hidden" value="${account.strPassword}" name="strPassword">`);
                    var lUnique = $(`<input type="hidden" value="${objectData.lUnique}" name="lUnique">`);
                    var iCoin = $(`<input type="hidden" value='${account.iCash}' name="iCoin">`);
                    var iAvatar = $(`<input type="hidden" value='${iAvatarIndex}' name="iAvatar">`);
                    var strOptionCode = $(`<input type="hidden" value='${account.strOptionCode}' name="strOptionCode">`);
                    var strGroupID = $(`<input type="hidden" value='${account.strGroupID}' name="strGroupID">`);
                    var iClass = $(`<input type="hidden" value='${account.iClass}' name="iClass">`);
                    var iMaxPlayer = $(`<input type="hidden" value='${objectData.iMaxPlayer}' name="iMaxPlayer">`);
                    var eUserType = $(`<input type="hidden" value='${account.eUserType}' name="eUserType">`);
                    var iDefaultCoin = $(`<input type="hidden" value='${objectData.iDefaultCoin}' name="iDefaultCoin">`);
                    $form.append(eGameType).append(strID).append(strNickname).append(lUnique).append(iCoin).append(iAvatar).append(strOptionCode).append(strGroupID).append(iClass).append(iMaxPlayer).append(eUserType).append(iDefaultCoin);
                    $form.appendTo('body');
                    $form.submit();
                };

                const showCookiePermission = () => {
                    if (typeof Notification !== 'undefined' && Notification.permission === 'default' && IsMobile() == true) {
                        Notification.requestPermission().then((permission) => {
                            if (permission === 'granted') {
                                submitForm();
                            }
                        });
                    } else {
                        submitForm();
                    }
                };
                showCookiePermission();
            }
        });

        socket.on('SM_LeaveGame', () => {
            alert('Leave');
        });

        socket.on('UpdateCash', (iCash) => {

            console.log("Lobby::UpdateCash");
            const cCash = parseInt(iCash);
            account.iCash = cCash;
            $('#iUserCash').text(cCash.toLocaleString());
            //$('#iUserCash').text(0);
        });

        socket.on('UpdateOption', (strOptionCode) => {

            console.log("index::UpdateOption");

            account.strOptionCode = strOptionCode;
        });

        // setInterval(() => {
        //     socket.emit('CM_RoomGameList', {eGameType:eGameType});
        // }, 5000);  // 5초마다 방 목록을 요청

        //socket.emit('CM_RoomList');

        let OnClickRefresh = () => {

            socket.emit('CM_RoomGameList', {eGameType:eGameType});
            //location.reload();
        }

        let OnClickMakeRoom = () => {

            if(eGameType != 'ALL')
            {

                let strDefaultRoomName = [];

                let index = 0;

                if(eGameType == 'HOLDEM')
                {
                    strDefaultRoomName = ['포커 홀덤~!', '스피드 진행!!!', '매너게임 부탁!'];
                    index = Math.floor(Math.random()*3);
                    $('#room_name').val(strDefaultRoomName[index]);
                }
                else if(eGameType == 'BIG2')
                {
                    strDefaultRoomName = ['포커 빅투~!', '스피드 진행!!!', '매너게임 부탁!'];
                    index = Math.floor(Math.random()*3);
                    $('#room_name').val(strDefaultRoomName[index]);
                }
                else
                {
                    strDefaultRoomName = ['포커~!', '스피드 진행!!!', '매너게임 부탁!'];
                    index = Math.floor(Math.random()*3);
                    $('#room_name').val(strDefaultRoomName[index]);
                }
                $('#room_game').val(eGameType);
                
                $('#popup_makeroom').show();
            }
            else
            {
                $('#popup_alerttext1').text('게임을 클릭해주세요.');
                $('.button_cancelalert').hide();
                $('#popup_alert').show();
            }
        }

        let OnClickMakeRoomClose = () => {

            $('#popup_makeroom').hide();
        }

        let OnClickRequestInputClose = () => {

            $('#popup_requestinput').hide();
        }

        let OnClickRequestOutputClose = () => {

            $('#popup_requestoutput').hide();
        }

        let OnClickQuickJoin = (id) => {
            var iDefaultCoin = $('#' + id).text();
            console.log('OnClickQuickJoin :: Selected iDefaultCoin: ', iDefaultCoin);
            let strDefaultRoomName = [];
            let index = 0;
            let strRoomName = '';
            let iNumPlayers = 9;
            let iBettingTime = 8;
            if(eGameType == 'HOLDEM')
            {
                strDefaultRoomName = ['포커 홀덤~!', '스피드 진행!!!', '매너게임 부탁!'];
                index = Math.floor(Math.random()*3);
                strRoomName = strDefaultRoomName[index];
                iNumPlayers = 9;
                iBettingTime = 8;
            }
            else if(eGameType == 'SITGO')
            {
                strDefaultRoomName = ['포커 게임~!', '스피드 진행!!!', '매너게임 부탁!'];
                index = Math.floor(Math.random()*3);
                strRoomName = strDefaultRoomName[index];
                iNumPlayers = 6;
                iBettingTime = 8;
            }
            else
            {
                strDefaultRoomName = ['포커 게임~!', '스피드 진행!!!', '매너게임 부탁!'];
                index = Math.floor(Math.random()*3);
                strRoomName = strDefaultRoomName[index];
                iNumPlayers = 4;
                iBettingTime = 25;
            }
            let iRebuyInLevel = account.strOptionCode[1];
            let iBuyIn = parseInt(iRebuyInLevel)*100;
            let iBlind = iDefaultCoin;
            iBuyIn = parseInt(iBlind) * parseInt(iBuyIn);
            let strPassword = '';

            console.log(strPassword);
            console.log(`R-Name : ${strRoomName}, Pass : ${strPassword}, NumPlayers : ${iNumPlayers}, BettingTime : ${iBettingTime}, iBuyIn : ${iBuyIn}, iBlind : ${iBlind}`);

            //alert(`${eGameType} iCash : ${account.iCash}, iBuyIn : ${iBuyIn}, iBlind : ${iBlind}`);

            switch ( eGameType )
            {
                case 'SITGO':
                    if ( account.iCash < iBlind )
                    {
                        $('#popup_alerttext1').text('보유포인트가 참가비 보다 적습니다.');
                        $('.button_cancelalert').hide();
                        $('#popup_alert').show();
                        return;
                    }
                    break;
                case 'BIG2':
                    if ( account.iCash < iBlind )
                    {
                        $('#popup_alerttext1').text('보유포인트가 참가비 보다 적습니다.');
                        $('.button_cancelalert').hide();
                        $('#popup_alert').show();
                        return;
                    }
                    break;
                default:
                    if ( account.iCash < iBuyIn )
                    {
                        $('#popup_alerttext1').text('보유포인트가 바이인 보다 적습니다.');
                        $('.button_cancelalert').hide();
                        $('#popup_alert').show();
                        return;
                    }
                    break;
            }

            let data = {
                eGameType:eGameType,
                strID:account.strID,
                strNickname:account.strNickname,
                strGroupID:account.strGroupID,
                strOptionCode:account.strOptionCode,
                iCoin:account.iCash,
                iClass:5,
                iDefaultCoin:iBlind, 
                strRoomName:strRoomName, 
                strPassword:strPassword, 
                iBettingTime:iBettingTime,
                iMaxPlayer:iNumPlayers,
                iNumPlayer:1,
            };

            console.log(data);

            socket.emit('CM_QuickJoinRoom', data);
        }

        let CheckJoin = (lUnique, strPassword, gameType) => {
            
            console.log(lUnique);
            console.log(strPassword);
            console.log(gameType);

            if ( strPassword == '' || strPassword == undefined)
            {
                OnClickJoin(lUnique, gameType);
            }
            else
            {
                $('#room_enterunique').val(lUnique);
                $('#room_originpassword').val(strPassword);
                $('#room_egametype').val(gameType);
                $('#popup_enterpassword').show();
            }
        }

        let OnClickJoin = (lUnique, gameType) => {

            let data = {
                eGameType:gameType,
                strID:account.strID,
                strNickname:account.strNickname,
                strGroupID:account.strGroupID,
                iClass:account.iClass,
                iCoin:account.iCash, 
                lUnique:lUnique,
                strOptionCode:account.strOptionCode
            };

            console.log(data);

            socket.emit('CM_JoinRoom', data);
        }

        let OnClickRoomInfo = (lUnique, aGameType) => {

            console.log(`lUnique : ${lUnique}, aGameType : ${aGameType}`);


            let data = {
                //eGameType:eGameType,
                eGameType:aGameType,
                strID:account.strID,
                strNickname:account.strNickname,
                strGroupID:account.strGroupID,
                iClass:account.iClass,
                iCoin:account.iCash, 
                lUnique:lUnique,
                strOptionCode:account.strOptionCode
            };

            console.log(data);

            socket.emit('CM_RoomInfo', data);
        }

        $(document).on('click', '.avatar_index', (e) => {

            let value = $(e.currentTarget).attr('src');
            let index = $(e.currentTarget).attr('value');
            console.log(`value = ${value}, index = ${index}`);

            iAvatarIndex = index;

            $('#iSelectAvatar').attr('src', value);
            $('#iMyPageAvatar').attr('src', value);
        })

        $(document).on('click', '.button_hidealert', (e) => {
            let alertText = $('#popup_alerttext1').text().trim(); // 텍스트를 가져오고 양쪽 공백을 제거
            if(alertText === "정말로 나가시겠습니까?") {
                window.close(); // 문자열이 일치할 경우 window.close() 호출
            } else {
                $('#popup_alert').hide();
            }
        });
        $(document).on('click', '.button_cancelalert', (e) => {
            $('#popup_alert').hide();
        });

        $(document).on('click', '.button_enterpassword', (e) => {

            $('#popup_enterpassword').hide();

            let strEnterPassword = $('#room_enterpassword').val();
            let lUnique = $('#room_enterunique').val();
            let eGameType =$('#room_egametype').val();
            let strOriginPassword = $('#room_originpassword').val();

            console.log(`EnterPassword : ${strEnterPassword}, lUnique : ${lUnique}, strOriginPassword : ${strOriginPassword}`);

            if ( strEnterPassword == strOriginPassword )
            {
                OnClickJoin(lUnique,eGameType);
            }
            else
            {
                $('#popup_alerttext1').text('비밀번호가 틀립니다.');
                $('.button_cancelalert').hide();
                $('#popup_alert').show();
            }
        });

        $(document).on('click', '.button_makeroom', (e) => {

            let iRebuyInLevel = account.strOptionCode[1];
            let iNumPlayers = $('#room_numplayer').val();
            let iBettingTime = $('#room_bettingtime').val();
            let iBuyIn = parseInt(iRebuyInLevel)*100;
            let iBlind = $('#room_blind').val();
            iBuyIn = parseInt(iBlind) * parseInt(iBuyIn);
            let strRoomName = $('#room_name').val();
            let strPassword = $('#room_password').val();

			console.log(strPassword);
            console.log(`R-Name : ${strRoomName}, Pass : ${strPassword}, NumPlayers : ${iNumPlayers}, BettingTime : ${iBettingTime}, iBuyIn : ${iBuyIn}, iBlind : ${iBlind}`);

            //alert(`${eGameType} iCash : ${account.iCash}, iBuyIn : ${iBuyIn}, iBlind : ${iBlind}`);

            switch ( eGameType )
            {
                case 'SITGO':
                    if ( account.iCash < iBlind )
                    {
                        $('#popup_alerttext1').text('보유포인트가 참가비 보다 적습니다.');
                        $('.button_cancelalert').hide();
                        $('#popup_alert').show();
                        return;
                    }
                    break;
                case 'BIG2':
                    if ( account.iCash < iBlind )
                    {
                        $('#popup_alerttext1').text('보유포인트가 참가비 보다 적습니다.');
                        $('.button_cancelalert').hide();
                        $('#popup_alert').show();
                        return;
                    }
                    break;
                default:
                    if ( account.iCash < iBuyIn )
                    {
                        $('#popup_alerttext1').text('보유포인트가 바이인 보다 적습니다.');
                        $('.button_cancelalert').hide();
                        $('#popup_alert').show();
                        return;
                    }
                    break;
            }

            if ( strRoomName == '' || iNumPlayers == undefined || iBettingTime == undefined || iBuyIn == undefined || iBlind == undefined )
            {
                $('#popup_alerttext1').text('입력 값이 올바르지 않습니다.');
                $('.button_cancelalert').hide();
                $('#popup_alert').show();
                return;
            }

            //alert(account.iCash);

            //GameMain.Test();

            let data = {
                eGameType:eGameType,
                strID:account.strID,
                strNickname:account.strNickname,
                strGroupID:0,
                strOptionCode:account.strOptionCode,
                iCoin:account.iCash,
                iClass:5,
                iDefaultCoin:iBlind, 
                strRoomName:strRoomName, 
                strPassword:strPassword, 
                iBettingTime:iBettingTime,
                iMaxPlayer:iNumPlayers,
                iNumPlayer:1
            };

            console.log(data);

            socket.emit('CM_CreateRoom', data);

            $('#popup_makeroom').hide();
        });

        $(document).on('click', '.button_requestinput', (e) => {
            e.preventDefault();
            let iAmount = $('#requestinput_amount').val();

            $.ajax({
                type:'post',
                url: "/account/request_input",
                data: {
                    iAmount:iAmount,
                },
                success:function(ret) {
                    
                    console.log(ret);

                    if ( ret.result == 'OK' )
                    {
                        location.reload();
                    }
                }
            });

            $('#popup_requestinput').hide();
        });

        $(document).on('click', '.button_requestoutput', (e) => {
            e.preventDefault();
            let iAmount = $('#requestoutput_amount').val();

            console.log(`*******************iAmount : ${iAmount} - account.iCash : ${account.iCash}`);

            if ( parseInt(iAmount) > parseInt(account.iCash) )
            {
                alert('출금금액이 보유금액보다 큽니다.');
                return;
            }

            $.ajax({
                type:'post',
                url: "/account/request_output",
                data: {
                    iAmount:iAmount,
                },
                success:function(ret) {
                    
                    console.log(ret);

                    if ( ret.result == 'OK' )
                    {
                        location.reload();
                    }
                }
            });

            $('#popup_requestinput').hide();
        });

        let OnClickMyPage = () => {

            $('#popup_mypage').show();
            $('#popup_avatar').hide();
        }

        let OnClickMyPageClose = () => {

            $('#popup_mypage').hide();
        }

        let OnClickAvatar = () => {

            $('#popup_avatar').show();
        }

        let OnClickAvatarClose = () => {

        //     $.ajax({
        //     type:'post',
        //     url: "/request_avatarindex",
        //     data: {index:iAvatarIndex},
        //     success:function(ret) {
        //         console.log(ret);
        //     }
        // });

            $('#popup_avatar').hide();
        }

        let OnClickSetting = () => {
            //event.preventDefault();
            let iRebuyIn = account.strOptionCode[0];
            let iRebuyInLevel = account.strOptionCode[1];
            let iBgLevel = account.strOptionCode[2];
            let iCardDeck = account.strOptionCode[3];

            if ( iRebuyIn == 0 )
            {
                $('#radioRebuyInOff').prop('checked', true);
                $('#radioRebuyInOn').prop('checked', false);
            }
            else
            {
                $('#radioRebuyInOff').prop('checked', false);
                $('#radioRebuyInOn').prop('checked', true);                
            }
            
            $('#selectRebuyIn').val(parseInt(iRebuyInLevel)*100);
            $('#selectBg').val(parseInt(iBgLevel));
            $('#selectDeck').val(parseInt(iCardDeck));
            $('#popup_setting').show();
        }
        let OnClickWindowClose = () => {

            $('#popup_alerttext1').text('정말로 나가시겠습니까?');
            $('.button_cancelalert').show();
            $('#popup_alert').show();
        }

        let OnClickSettingClose = () => {

            $('#popup_setting').hide();
        }

        let pointChange = () =>{
            $.ajax({
                type:'post',
                url: "/account/request_pointchange",
                data: {},
                success:function(ret) {
                    console.log(ret);

                    if ( ret.result == 'OK' )
                    {
                        alert('포인트로 전환 완료 되었습니다.');
                        location.reload();
                    }
                    else
                    {
                        alert('보유머니를 확인해주세요.');
                        location.reload();
                    }
                }
            });
        }


        let OnClickCheckNickname = () => {
            let strCheckNickname = $('input[name=strCheckNickname]').val();

            // 정규 표현식을 사용하여 검사
            let nicknameRegex = /^[A-Za-z가-힣0-9]{2,5}$/;

            // 닉네임 길이와 사용 가능한 문자를 체크
            if (!nicknameRegex.test(strCheckNickname)) {
                alert('닉네임은 2자리에서 5자리 사이이며, 영어, 한글, 숫자만 포함할 수 있습니다.');
                return; // 조건에 맞지 않으면 여기서 함수 실행을 중단한다.
            }

            $.ajax({
                type: 'post',
                url: "/account/request_checknickname",
                data: { strCheckNickname: strCheckNickname },
                success: function(ret) {
                    console.log(ret);

                    if (ret.result == 'OK') {
                        alert('사용 가능한 닉네임 입니다.');
                    } else {
                        alert('이미 사용중인 닉네임 입니다.');
                    }
                }
            });
        };

        let OnClickModifyMyPage = () => {
            let strCheckNickname = $('input[name=strCheckNickname]').val();

            $.ajax({
                type:'post',
                url: "/account/request_modifymypage",
                data: {
                    strID:account.strID,
                    strCheckNickname:strCheckNickname,
                    iAvatarIndex:iAvatarIndex
                },
                success:function(ret) {
                    console.log(ret);

                    if ( ret.result == 'OK' )
                    {
                        location.reload();                        
                    }
                    else
                    {
                        alert('수정을 완료 하지 못했습니다.');
                    }
                }
            });
        }

        let OnClickModifyClose = () =>{
            $('#mainMenu').show();
            $('#popupMenu').hide();
        }

        let OnClickModifySetting = () => {
            let rebuyinAuto = $('#rebuyinAuto').hasClass('on') ? '1' : '0';
            let iBuyIn = parseInt($('#selectRebuyIn').text().replace('%', ''));
            let iBgLevel = $('#selectBg0').prop('checked') ? '1' : '2';
            let iDeck = $('#selectBg0').prop('checked') ? '1' : '2';

            // 음악 볼륨 및 효과음 볼륨 값 추출
            let musicVolume = parseInt($('.melody .percent').text().replace('%', ''));
            let soundVolume = parseInt($('.sound .percent').text().replace('%', ''));

            // 100% 볼륨을 "99"로 변환하여 저장
            let musicVolumeCode = musicVolume == 100 ? "99" : musicVolume.toString().padStart(2, '0');
            let soundVolumeCode = soundVolume == 100 ? "99" : soundVolume.toString().padStart(2, '0');


            let strOptionCode = account.strOptionCode;

            let strOption = rebuyinAuto;

            strOption += (parseInt(iBuyIn) / 100).toString();

            strOption += (parseInt(iBgLevel)).toString();

            strOption += (parseInt(iDeck)).toString();

            strOptionCode = strOption + musicVolumeCode + soundVolumeCode;

            console.log(`rebuyinAuto : ${rebuyinAuto}, iBuyIn : ${iBuyIn}, iBgLevel : ${iBgLevel},strOptionCode : ${strOptionCode}`);

            $.ajax({
                type:'post',
                url: "/account/request_modifysetting",
                data: {
                    strID:account.strID,
                    strOptionCode:strOptionCode
                },
                success:function(ret) {
                    console.log(ret);

                    if ( ret.result == 'OK' )
                    {
                        location.reload();                        
                    }
                    else
                    {
                        alert('수정을 완료 하지 못했습니다.');
                    }
                }
            });
        }

        let OnClickRequestInput = () => {

            $('#popup_requestinput').show();
        }

        let OnClickRequestOutput = () => {

            $('#popup_requestoutput').show();
        }

        function formatCurrencyToKoreanWon(value) {
            // 만원 단위와 그 이하를 분리
            console.log(`formatCurrencyToKoreanWon`);
            console.log(value);
            const units = Math.floor(value / 10000);
            const remainder = value % 10000;

            // 만원 단위 포맷팅: 3자리마다 콤마 추가
            const unitsFormat = units.toLocaleString('ko-KR');

            // 나머지 포맷팅: 3자리마다 콤마 추가
            const remainderFormat = remainder > 0 ? remainder.toLocaleString('ko-KR') : '';

            // "만" 단위와 "천 원" 단위를 조합
            let formattedValue = '';
            if (units > 0) {
                formattedValue += `${unitsFormat}만`;
            }
            if (remainder > 0) {
                formattedValue += units > 0 ? ` ${remainderFormat}` : remainderFormat;
            }
            console.log(formattedValue);
            // 최종 결과 반환
            return formattedValue;
        }

        document.addEventListener('DOMContentLoaded', function() {
            $('#iCash').text(formatCurrencyToKoreanWon(account.iCash));
            // 게이지바 클릭
            const gaugeContainers = document.querySelectorAll('.gauge');

            gaugeContainers.forEach(function(container) {
                const imageContainer = container.querySelector('.image-container');
                const percentElement = container.querySelector('.percent');
                const indicator = container.querySelector('.indicator');
                const gaugeBar = document.createElement('div');
                gaugeBar.classList.add('gauge-bar');
                imageContainer.appendChild(gaugeBar);

                let isDragging = false;

                imageContainer.addEventListener('mousedown', function(event) {
                    isDragging = true;
                    updatePercent(event.clientX, percentElement.id === 'selectRebuyIn');
                });

                document.addEventListener('mousemove', function(event) {
                    if (isDragging) {
                        updatePercent(event.clientX, percentElement.id === 'selectRebuyIn');
                    }
                });

                document.addEventListener('mouseup', function() {
                    isDragging = false;
                });
                function updatePercent(mouseX, isSelectRebuyIn) {
                    const gaugeContainerWidth = imageContainer.offsetWidth;
                    let rawPercent = (mouseX - imageContainer.getBoundingClientRect().left) / gaugeContainerWidth * 100;
                    let percent = Math.min(100, Math.max(0, rawPercent)); // Ensure percent is between 0 and 100

                    if (isSelectRebuyIn) {
                        // Adjust percent to nearest 100%, 200%, 300%, 400%, 500%
                        if (percent <= 20) {
                            percent = 100;
                        } else if (percent <= 40) {
                            percent = 200;
                        } else if (percent <= 60) {
                            percent = 300;
                        } else if (percent <= 80) {
                            percent = 400;
                        } else {
                            percent = 500;
                        }
                    } else {
                        percent = Math.round(percent); // Round to nearest whole number for regular gauges
                    }

                    percentElement.textContent = percent + '%';
                    gaugeBar.style.width = percent + '%';

                    // Update the position of the indicator
                    let indicatorPosition = 0;
                    if(isSelectRebuyIn)
                    {
                        indicatorPosition = gaugeContainerWidth * (percent / 500) - (indicator.offsetWidth / 2); // Adjust for 500% scale
                    }
                    else
                    {
                        indicatorPosition = gaugeContainerWidth * (percent / 100) - (indicator.offsetWidth / 2); // Adjust for 100% scale
                    }
                    indicatorPosition = Math.max(0, Math.min(indicatorPosition, gaugeContainerWidth - indicator.offsetWidth)); // Ensure indicator stays within bounds
                    indicator.style.left = indicatorPosition + 'px';
                }
            });
        });



</script>

</body>
